{"version":3,"sources":["components/app/Navbar.js","components/app/Home.js","components/app/MyComponent.js","store/interactions.js","store/actions.js","App.js","store/reducers.js","store/configureStore.js","Root.js","registerServiceWorker.js","index.js"],"names":["styles","brandName","color","button","marginRight","account","fontSize","Navbar","network","balanceOf","className","id","Link","to","style","text","Home","dispatch","this","props","loadBlockchainData","Component","connect","state","MyComponent","loadWeb3","a","window","ethereum","web3","Web3","enable","currentProvider","type","connection","App","BrowserRouter","Switch","Route","path","render","rootReducer","combineReducers","accounts","action","loggerMiddleware","createLogger","middleware","thunkMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","store","createStore","applyMiddleware","Root","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.21e3b345.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport {\r\n  Navbar as BlueprintNavbar,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n  Button\r\n} from '@blueprintjs/core'\r\n\r\nimport './Navbar.css'\r\n\r\nconst styles = {\r\n  brandName: {\r\n    color: '#fff'\r\n  },\r\n  button: {\r\n    marginRight: '10px'\r\n  },\r\n  account: {\r\n    fontSize: '12px'\r\n  }\r\n}\r\n\r\nfunction Navbar({ account, network, balanceOf }) {\r\n  return (\r\n    <BlueprintNavbar className=\"pt-fixed-top pt-dark\">\r\n      <NavbarGroup>\r\n        <NavbarHeading id=\"brand-name\">\r\n          <Link to=\"/\" style={styles.brandName}>\r\n            Blockchain Mastery University\r\n          </Link>\r\n        </NavbarHeading>\r\n        <Link to=\"/\">\r\n          <Button className=\"bp3-minimal\" text=\"Home\" style={styles.button}/>\r\n        </Link>\r\n        <Link to=\"/my-component\">\r\n          <Button className=\"bp3-minimal\" text=\"My Component\" style={styles.button}/>\r\n        </Link>\r\n      </NavbarGroup>\r\n    </BlueprintNavbar>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Home extends Component {\r\n  async componentWillMount() {\r\n    const { dispatch } = this.props\r\n    await this.loadBlockchainData(dispatch)\r\n  }\r\n\r\n  async loadBlockchainData(dispatch) {\r\n    // TODO: Wire up blockchain connection\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>Hello, World!</h1>\r\n        <hr/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // TODO: Fill me in\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nclass MyComponent extends Component {\r\n  async componentWillMount() {\r\n    const { dispatch } = this.props\r\n    await this.loadBlockchainData(dispatch)\r\n  }\r\n\r\n  async loadBlockchainData(dispatch) {\r\n    // TODO: Wire up blockchain connection\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h1>My Component</h1>\r\n        <hr/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // TODO: Fill me in\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MyComponent);\r\n","import Web3 from 'web3'\r\nimport {\r\n  web3Loaded,\r\n  web3AccountLoaded,\r\n} from './actions'\r\n\r\nexport const loadWeb3 = async (dispatch) => {\r\n  let web3\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum)\r\n    await window.ethereum.enable()\r\n  }\r\n  else if (window.web3) {\r\n    web3 = new Web3(window.web3.currentProvider)\r\n  }\r\n  else {\r\n    // Do nothing....\r\n  }\r\n  dispatch(web3Loaded(web3))\r\n  return web3\r\n}\r\n\r\nexport const loadAccount = async (web3, dispatch) => {\r\n  const accounts = await web3.eth.getAccounts()\r\n  const account = accounts[0]\r\n  dispatch(web3AccountLoaded(account))\r\n  return account\r\n}\r\n","// Web3\r\nexport const WEB3_CONNECTION_LOADED = 'WEB3_CONNECTION_LOADED'\r\nexport function web3Loaded(connection) {\r\n  return {\r\n    type: WEB3_CONNECTION_LOADED,\r\n    connection,\r\n  }\r\n}\r\n\r\nexport const WEB3_ACCOUNTS_LOADED = 'WEB3_ACCOUNTS_LOADED'\r\nexport function web3AccountLoaded(accounts) {\r\n  return {\r\n    type: WEB3_ACCOUNTS_LOADED,\r\n    accounts,\r\n  }\r\n}\r\n\r\nexport const WEB3_NETWORK_LOADED = 'WEB3_NETWORK_LOADED'\r\nexport function web3NetworkLoaded(network) {\r\n  return {\r\n    type: WEB3_NETWORK_LOADED,\r\n    network,\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Navbar from './components/app/Navbar'\r\nimport Home from './components/app/Home'\r\nimport MyComponent from './components/app/MyComponent'\r\nimport { loadWeb3 } from './store/interactions'\r\n\r\nclass App extends Component {\r\n  componentWillMount() {\r\n    this.loadBlockchainData(this.props.dispatch)\r\n  }\r\n\r\n  async loadBlockchainData(dispatch) {\r\n    const web3 = await loadWeb3(dispatch)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      account,\r\n    } = this.props;\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"app\">\r\n          <Navbar {...this.props} />\r\n          <div id=\"content\">\r\n            <Switch>\r\n              <Route\r\n                path='/my-component'\r\n                render={(props) => (\r\n                  <MyComponent account={account} /> : null\r\n                )}\r\n              />\r\n              <Route\r\n                path='/'\r\n                render={(props) => (\r\n                  <Home {...props} /> : null\r\n                )}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    // TODO: Fill me in\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport {\r\n  WEB3_CONNECTION_LOADED,\r\n  WEB3_ACCOUNTS_LOADED,\r\n  WEB3_NETWORK_LOADED,\r\n} from './actions';\r\n\r\nfunction web3(state = { accounts: {} }, action) {\r\n  switch (action.type) {\r\n    case WEB3_CONNECTION_LOADED:\r\n      return { ...state, connection: action.connection };\r\n    case WEB3_ACCOUNTS_LOADED:\r\n      return { ...state, accounts: action.accounts };\r\n    case WEB3_NETWORK_LOADED:\r\n      return { ...state, network: action.network };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  web3,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst loggerMiddleware = createLogger();\r\nconst middleware = [\r\n  thunkMiddleware,\r\n];\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware)),\r\n  );\r\n  return store;\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport configureStore from './store/configureStore';\r\n\r\nconst store = configureStore();\r\nfunction Root() {\r\n  return (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default Root;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Root from './Root';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}